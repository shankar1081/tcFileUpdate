const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
var Schema = mongoose.Schema;
const serviceSchema = mongoose.Schema({
	serviceType: { type: String },
	rate: { type: Number },
	finRate: { type: Number },
	uom: { type: String },
	capacity: { type: String },
	typeOfDocument: { type: String },
	voiSlab: { type: String },
	tools: { type: String },
	sourceLanguage: { type: String },
	targetLanguage: { type: String }
});
const PartnerSchema = mongoose.Schema({
	partnerName: { type: String },
	email: { type: String },
	mobileNo: { type: Number },
	addressLine1: { type: String },
	addressLine2: { type: String },
	city: { type: String },
	state: { type: String },
	country: { type: String },
	ndaStatus: { type: String },
	ndaSentFile: { type: String },
	ndaSentDate: { type: String },
	ndaRecvFile: { type: String },
	ndaRecvDate: { type: String },
	msaSentFile: { type: String },
	msaStatus: { type: String },
	msaSentDate: { type: String },
	msaExpDate: { type: String },
	msaRecvFile: { type: String },
	msaRecvDate: { type: String },
	experienceYears: { type: String },
	experienceMonths: { type: String },
	typesOfServices: [serviceSchema],
	domain: { type: String },
	resume: { type: String },
	ccemail: { type: String },
	partnerStatus: { type: String },
	rrfId: { type: Array, required: true },
	createdOn: { type: Date },
	createdBy: { type: Schema.Types.ObjectId, ref: 'User' },
	modifiedOn: { type: Date },
	modifiedBy: { type: String },
	typeOfVendor: { type: String },
	numberOfTranslator: { type: String },
	companyName: { type: String },
	availability: { type: String },
	timeZone: { type: String },
	masterIn: { type: String },
	pFinYear: { type: String },
	certificate: { type: String },
	leadSource: { type: String },
	workType: { type: String },
	nativeLanguage: { type: String },
	qualification: { type: String },
	fonts: { type: String },
	paymentMode: { type: String },
	pan: { type: String },
	panNo: { type: String },
	serviceTax: { type: String },
	nameInAccount: { type: String },
	bankName: { type: String },
	accountNo: { type: String },
	branchName: { type: String },
	typeOfAccount: { type: String },
	ifscCode: { type: String },
	beneficiaryAddress: { type: String },
	bankAddress: { type: String },
	ibanNo: { type: String },
	swiftCode: { type: String },
	sortCode: { type: String },
	branchCode: { type: String },
	bankCode: { type: String },
	bankNo: { type: String },
	paypalId: { type: String },
	vendorId: { type: String },
	currency: { type: String },
	certificateValue: { type: String },
	createdName: { type: String },
	sample: { type: String, default: "Yes" },
	source: { type: String, default: "Internal Source" },
	gst: { type: String },
	gstValue: { type: String },
	partnerYear: { type: String },
	partnerMonth: { type: Number },
	voArtist: { type: String },
	audioFile: { type: String },
	subDomainName:{type:String},
	upworkPayment:{type:String},
	stateGst:{type:String},
	msmed:{type:String},
	msmedNo:{type:String},
	reason:{type:String}

});

const Partner = module.exports = mongoose.model('Partner', PartnerSchema);
module.exports = Partner;